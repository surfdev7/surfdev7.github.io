{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the surfcore 2 documentation! surfcore2 is the second version of surfcore. I decided to re-write the core to increase performance. The source code for surfcore2 is private, but the documentation is not. A slightly overwhelming overlook at the API: Server Users : { UserJoined : ( f : ( user : User ) => void ) => void ; Leaderstats : { Watch : ( statName : string , parseValue ?: (( value : number ) => string ) | undefined ) => void ; }; GetUserCache : () => Map < string , User > ; GetUserList : () => User []; Get : ( playerName : PlayerIdentifier ) => User ; Exists : ( playerName : PlayerIdentifier ) => boolean ; }, Network : { Universe : { ServersChanged : Signal < ( servers : UniverseServer []) => void , false > ; GetServers : () => UniverseServer []; }; ClientEvents : { Trigger : < T extends ClientEvent > ( event : T | ClientEvent , Player : Player ) => void ; TriggerAll : < T extends ClientEvent > ( event : ClientEvent | T ) => void ; }, GetPlayerPing : ( Player : Player ) => number ; }, Moderation : { BanLocalPlayerFromLocalServer : ( Player : Player , reason : string ) => void ; UnBanLocalPlayerFromLocalServer : ( PlayerUserId : number ) => void ; IsPlayerLocallyBanned : ( Player : Player ) => boolean ; PlayerPassedLocalModeration : ( Player : Player ) => boolean ; KickPlayer : ( Player : Player , reason : string ) => void ; }, Debris : { add : ( object : unknown , time : number ) => void ; }","title":"Home"},{"location":"#welcome-to-the-surfcore-2-documentation","text":"surfcore2 is the second version of surfcore. I decided to re-write the core to increase performance. The source code for surfcore2 is private, but the documentation is not.","title":"Welcome to the surfcore 2 documentation!"},{"location":"#a-slightly-overwhelming-overlook-at-the-api","text":"","title":"A slightly overwhelming overlook at the API:"},{"location":"#server","text":"Users : { UserJoined : ( f : ( user : User ) => void ) => void ; Leaderstats : { Watch : ( statName : string , parseValue ?: (( value : number ) => string ) | undefined ) => void ; }; GetUserCache : () => Map < string , User > ; GetUserList : () => User []; Get : ( playerName : PlayerIdentifier ) => User ; Exists : ( playerName : PlayerIdentifier ) => boolean ; }, Network : { Universe : { ServersChanged : Signal < ( servers : UniverseServer []) => void , false > ; GetServers : () => UniverseServer []; }; ClientEvents : { Trigger : < T extends ClientEvent > ( event : T | ClientEvent , Player : Player ) => void ; TriggerAll : < T extends ClientEvent > ( event : ClientEvent | T ) => void ; }, GetPlayerPing : ( Player : Player ) => number ; }, Moderation : { BanLocalPlayerFromLocalServer : ( Player : Player , reason : string ) => void ; UnBanLocalPlayerFromLocalServer : ( PlayerUserId : number ) => void ; IsPlayerLocallyBanned : ( Player : Player ) => boolean ; PlayerPassedLocalModeration : ( Player : Player ) => boolean ; KickPlayer : ( Player : Player , reason : string ) => void ; }, Debris : { add : ( object : unknown , time : number ) => void ; }","title":"Server"},{"location":"API/Client/Audio/","text":"Audio This controller handles all the Audio functionality for the client. API add : ( object : unknown , time : number ) => void ; add Debris . add ( object , number ); // n seconds later, the object is destroyed! Method that adds object to debris queue, destroying them after they have reached their expiration time.","title":"Audio"},{"location":"API/Client/Audio/#audio","text":"This controller handles all the Audio functionality for the client. API add : ( object : unknown , time : number ) => void ;","title":"Audio"},{"location":"API/Client/Audio/#add","text":"Debris . add ( object , number ); // n seconds later, the object is destroyed! Method that adds object to debris queue, destroying them after they have reached their expiration time.","title":"add"},{"location":"API/Client/Client/","text":"Client This controller handles the local client. API Platform : string ; PlatformUpdate : Signal < ( platform : Platform.clientPlatform ) => void , false > ; Platform ClientCore . Client . Platform ; // -> Platform.clientPlatform (property) current platform client is running on. (based on Platform util inference). Value: Platform.clientPlatform \"computer\" (default) detected device is a computer. \"phone\" detected device is a phone. \"tablet\" detected device is a tablet. \"console\" detected device is a console. PlatformUpdate ClientCore . Client . PlatformUpdate . Connect (( platform ) => { print ( \"Player is playing on: \" + platform ); }); Signal for changes to client platform. This is usually triggered after the screen size or input changes.","title":"Client"},{"location":"API/Client/Client/#client","text":"This controller handles the local client. API Platform : string ; PlatformUpdate : Signal < ( platform : Platform.clientPlatform ) => void , false > ;","title":"Client"},{"location":"API/Client/Client/#platform","text":"ClientCore . Client . Platform ; // -> Platform.clientPlatform (property) current platform client is running on. (based on Platform util inference). Value: Platform.clientPlatform \"computer\" (default) detected device is a computer. \"phone\" detected device is a phone. \"tablet\" detected device is a tablet. \"console\" detected device is a console.","title":"Platform"},{"location":"API/Client/Client/#platformupdate","text":"ClientCore . Client . PlatformUpdate . Connect (( platform ) => { print ( \"Player is playing on: \" + platform ); }); Signal for changes to client platform. This is usually triggered after the screen size or input changes.","title":"PlatformUpdate"},{"location":"API/Client/Network/","text":"","title":"Network"},{"location":"API/Server/Debris/","text":"Debris Utility that manages the programmatic removal of objects. API add : ( object : unknown , time : number ) => void ; Methods Add: ( object : unknown , time : number ) => void Add Method that adds object to debris queue, destroying them after they have reached their expiration time. Example Debris . add ( object , number ); // n seconds later, the object is destroyed!","title":"Debris"},{"location":"API/Server/Debris/#debris","text":"Utility that manages the programmatic removal of objects. API add : ( object : unknown , time : number ) => void ;","title":"Debris"},{"location":"API/Server/Debris/#methods","text":"Add: ( object : unknown , time : number ) => void","title":"Methods"},{"location":"API/Server/Debris/#add","text":"Method that adds object to debris queue, destroying them after they have reached their expiration time.","title":"Add"},{"location":"API/Server/Debris/#example","text":"Debris . add ( object , number ); // n seconds later, the object is destroyed!","title":"Example"},{"location":"API/Server/Moderation/","text":"Moderation Service responsible for handling all moderation tasks. API BanLocalPlayerFromLocalServer : ( Player : Player , reason : string ) => void ; UnBanLocalPlayerFromLocalServer : ( PlayerUserId : number ) => void ; IsPlayerLocallyBanned : ( Player : Player ) => boolean ; PlayerPassedLocalModeration : ( Player : Player ) => boolean ; KickPlayer : ( Player : Player , reason : string ) => void ; Methods BanLocalPlayerFromLocalServer: ( Player : Player , reason : string ) => void BanLocalPlayerFromLocalServer Bans player from local server. (Not a cross server permanent ban) Example Moderation . BanLocalPlayerFromLocalServer ( Player , string ); // \"YOU have been KICKED for <string reason>!\" UnBanLocalPlayerFromLocalServer: ( PlayerUserId : number ) => void UnBanLocalPlayerFromLocalServer UnBans player from local server. (only repeals local server ban) Example Moderation . UnBanLocalPlayerFromLocalServer ( PlayerUserId ); IsPlayerLocallyBanned: ( Player : Player ) => boolean IsPlayerLocallyBanned Checks if player is locally banned. (used internally in users service) Example print ( Moderation . IsPlayerLocallyBanned ( Player )); // -> true | false PlayerPassedLocalModeration: ( Player : Player ) => boolean PlayerPassedLocalModeration Returns whether or not player is locally banned. KickPlayer: ( Player : Player , reason : string ) => void KickPlayer The actual kick function of the server. Example Moderation.KickPlayer(Player, string); // \"YOU have been KICKED for <string reason>!\"","title":"Moderation"},{"location":"API/Server/Moderation/#moderation","text":"Service responsible for handling all moderation tasks. API BanLocalPlayerFromLocalServer : ( Player : Player , reason : string ) => void ; UnBanLocalPlayerFromLocalServer : ( PlayerUserId : number ) => void ; IsPlayerLocallyBanned : ( Player : Player ) => boolean ; PlayerPassedLocalModeration : ( Player : Player ) => boolean ; KickPlayer : ( Player : Player , reason : string ) => void ;","title":"Moderation"},{"location":"API/Server/Moderation/#methods","text":"BanLocalPlayerFromLocalServer: ( Player : Player , reason : string ) => void","title":"Methods"},{"location":"API/Server/Moderation/#banlocalplayerfromlocalserver","text":"Bans player from local server. (Not a cross server permanent ban)","title":"BanLocalPlayerFromLocalServer"},{"location":"API/Server/Moderation/#example","text":"Moderation . BanLocalPlayerFromLocalServer ( Player , string ); // \"YOU have been KICKED for <string reason>!\" UnBanLocalPlayerFromLocalServer: ( PlayerUserId : number ) => void","title":"Example"},{"location":"API/Server/Moderation/#unbanlocalplayerfromlocalserver","text":"UnBans player from local server. (only repeals local server ban)","title":"UnBanLocalPlayerFromLocalServer"},{"location":"API/Server/Moderation/#example_1","text":"Moderation . UnBanLocalPlayerFromLocalServer ( PlayerUserId ); IsPlayerLocallyBanned: ( Player : Player ) => boolean","title":"Example"},{"location":"API/Server/Moderation/#isplayerlocallybanned","text":"Checks if player is locally banned. (used internally in users service)","title":"IsPlayerLocallyBanned"},{"location":"API/Server/Moderation/#example_2","text":"print ( Moderation . IsPlayerLocallyBanned ( Player )); // -> true | false PlayerPassedLocalModeration: ( Player : Player ) => boolean","title":"Example"},{"location":"API/Server/Moderation/#playerpassedlocalmoderation","text":"Returns whether or not player is locally banned. KickPlayer: ( Player : Player , reason : string ) => void","title":"PlayerPassedLocalModeration"},{"location":"API/Server/Moderation/#kickplayer","text":"The actual kick function of the server.","title":"KickPlayer"},{"location":"API/Server/Moderation/#example_3","text":"Moderation.KickPlayer(Player, string); // \"YOU have been KICKED for <string reason>!\"","title":"Example"},{"location":"API/Server/Network/","text":"Network Service responsible for handling all networking related tasks on the servers end. API Universe : { ServersChanged : Signal < ( servers : UniverseServer []) => void , false > ; GetServers : () => UniverseServer []; }; ClientEvents : { Trigger : < T extends ClientEvent > ( event : T | ClientEvent , Player : Player ) => void ; TriggerAll : < T extends ClientEvent > ( event : ClientEvent | T ) => void ; }, GetPlayerPing : ( Player : Player ) => number ; Methods Universe Universe is the sub-service of Network responsible for tracking other servers within the place universe. ServersChanged: ServersChanged : Signal < ( servers : UniverseServer []) => void , false > ServersChanged Signal that fires when server list is updated internally. (when a server is created or destroyed) Example typescript Core.Network.Universe.ServersChanged.Connect((servers: UniverseServer[]) => { // do something! }); GetServers: GetServers : () => UniverseServer []; GetServers Method to access the real time UniverseServer[] list. Example Core . Network . Universe . GetServers (); // UniverseServer[]; ClientEvents ClientEvents is the sub-directory of Network that allows the server to propagate an event to a client or clients. Trigger: Trigger : < T extends ClientEvent > ( event : T | ClientEvent , Player : Player ) => void Trigger Method to trigger client event for a single client Example Core . Network . ClientEvents . Trigger ( ClientEvent , Player ); TriggerAll: TriggerAll : < T extends ClientEvent > ( event : ClientEvent | T ) => void TriggerAll Method to trigger client event for all clients Example Core . Network . ClientEvents . TriggerAll ( ClientEvent ); Attention GetPlayerPing will return -1 if a players ping has not been registered yet. GetPlayerPing: GetPlayerPing : ( Player : Player ) => number GetPlayerPing Method to get current registered ping of Player . Example Core . Network . GetPlayerPing ( Player ); // -> number","title":"Network"},{"location":"API/Server/Network/#network","text":"Service responsible for handling all networking related tasks on the servers end. API Universe : { ServersChanged : Signal < ( servers : UniverseServer []) => void , false > ; GetServers : () => UniverseServer []; }; ClientEvents : { Trigger : < T extends ClientEvent > ( event : T | ClientEvent , Player : Player ) => void ; TriggerAll : < T extends ClientEvent > ( event : ClientEvent | T ) => void ; }, GetPlayerPing : ( Player : Player ) => number ;","title":"Network"},{"location":"API/Server/Network/#methods","text":"","title":"Methods"},{"location":"API/Server/Network/#universe","text":"Universe is the sub-service of Network responsible for tracking other servers within the place universe. ServersChanged: ServersChanged : Signal < ( servers : UniverseServer []) => void , false >","title":"Universe"},{"location":"API/Server/Network/#serverschanged","text":"Signal that fires when server list is updated internally. (when a server is created or destroyed)","title":"ServersChanged"},{"location":"API/Server/Network/#example","text":"typescript Core.Network.Universe.ServersChanged.Connect((servers: UniverseServer[]) => { // do something! }); GetServers: GetServers : () => UniverseServer [];","title":"Example"},{"location":"API/Server/Network/#getservers","text":"Method to access the real time UniverseServer[] list.","title":"GetServers"},{"location":"API/Server/Network/#example_1","text":"Core . Network . Universe . GetServers (); // UniverseServer[];","title":"Example"},{"location":"API/Server/Network/#clientevents","text":"ClientEvents is the sub-directory of Network that allows the server to propagate an event to a client or clients. Trigger: Trigger : < T extends ClientEvent > ( event : T | ClientEvent , Player : Player ) => void","title":"ClientEvents"},{"location":"API/Server/Network/#trigger","text":"Method to trigger client event for a single client","title":"Trigger"},{"location":"API/Server/Network/#example_2","text":"Core . Network . ClientEvents . Trigger ( ClientEvent , Player ); TriggerAll: TriggerAll : < T extends ClientEvent > ( event : ClientEvent | T ) => void","title":"Example"},{"location":"API/Server/Network/#triggerall","text":"Method to trigger client event for all clients","title":"TriggerAll"},{"location":"API/Server/Network/#example_3","text":"Core . Network . ClientEvents . TriggerAll ( ClientEvent ); Attention","title":"Example"},{"location":"API/Server/Network/#getplayerping-will-return-1-if-a-players-ping-has-not-been-registered-yet","text":"GetPlayerPing: GetPlayerPing : ( Player : Player ) => number","title":"GetPlayerPing will return -1 if a players ping has not been registered yet."},{"location":"API/Server/Network/#getplayerping","text":"Method to get current registered ping of Player .","title":"GetPlayerPing"},{"location":"API/Server/Network/#example_4","text":"Core . Network . GetPlayerPing ( Player ); // -> number","title":"Example"},{"location":"API/Server/Users/","text":"Users Service responsible for handling players and their User object(s). API UserJoined : ( f : ( user : User ) => void ) => void ; Leaderstats : { Watch : ( statName : string , parseValue ?: (( value : number ) => string ) | undefined ) => void ; }; GetUserCache : () => Map < string , User > ; GetUserList : () => User []; Get : ( playerName : PlayerIdentifier ) => User ; Exists : ( playerName : PlayerIdentifier ) => boolean ; Methods Leaderstats Leaderstats is a sub-service of Users responsible for tracking and handling leaderboard stats. Watch: ( statName : string , parseValue ?: (( value : number ) => string ) | undefined ) => void ; Watch Tells service to monitor statName and generate leaderstats objects. Example Core . Users . Leaderstats . Watch ( \"kills\" ); In the example, players will be able to see their \"kills\" leaderstat next to their name on the leaderboard. GetUserCache: () => Map < string , User > ; GetUserCache Returns ServerUsers object from service. Example const users = Core . Users . GetUserCache (); GetUserList: () => User []; GetUserList Returns ServerUsers object mapped to a list. Example // This example awards points to the users who are currently in the game. Core . Users . GetUserList (). forEach (( user ) => { awardPoints ( user ); }); Danger Potential type error Before calling Users.Get verify first that the user exists using Users.Exists . The Get method will only return a User object. It will not return undefined if the user does not exist. This type guard bypass was intentionally implemented to avoid using the as unknown as T workaround. Get: ( PlayerIdentifier ) => User ; Get Returns User object from PlayerIdentifier . Example // Player 'player1' is in the server. const user = Core . Users . Get ( \"player1\" ); // -> user const user2 = Core . Users . Get ( Player1 ); // -> user Exists: ( PlayerIdentifier ) => boolean ; Exists Returns whether the user PlayerIdentifier exists or not. Example print ( Core . Users . Exists ( \"Player1\" )); // -> false","title":"Users"},{"location":"API/Server/Users/#users","text":"Service responsible for handling players and their User object(s).","title":"Users"},{"location":"API/Server/Users/#api","text":"UserJoined : ( f : ( user : User ) => void ) => void ; Leaderstats : { Watch : ( statName : string , parseValue ?: (( value : number ) => string ) | undefined ) => void ; }; GetUserCache : () => Map < string , User > ; GetUserList : () => User []; Get : ( playerName : PlayerIdentifier ) => User ; Exists : ( playerName : PlayerIdentifier ) => boolean ;","title":"API"},{"location":"API/Server/Users/#methods","text":"","title":"Methods"},{"location":"API/Server/Users/#leaderstats","text":"Leaderstats is a sub-service of Users responsible for tracking and handling leaderboard stats. Watch: ( statName : string , parseValue ?: (( value : number ) => string ) | undefined ) => void ;","title":"Leaderstats"},{"location":"API/Server/Users/#watch","text":"Tells service to monitor statName and generate leaderstats objects.","title":"Watch"},{"location":"API/Server/Users/#example","text":"Core . Users . Leaderstats . Watch ( \"kills\" ); In the example, players will be able to see their \"kills\" leaderstat next to their name on the leaderboard. GetUserCache: () => Map < string , User > ;","title":"Example"},{"location":"API/Server/Users/#getusercache","text":"Returns ServerUsers object from service.","title":"GetUserCache"},{"location":"API/Server/Users/#example_1","text":"const users = Core . Users . GetUserCache (); GetUserList: () => User [];","title":"Example"},{"location":"API/Server/Users/#getuserlist","text":"Returns ServerUsers object mapped to a list.","title":"GetUserList"},{"location":"API/Server/Users/#example_2","text":"// This example awards points to the users who are currently in the game. Core . Users . GetUserList (). forEach (( user ) => { awardPoints ( user ); }); Danger","title":"Example"},{"location":"API/Server/Users/#potential-type-error","text":"Before calling Users.Get verify first that the user exists using Users.Exists . The Get method will only return a User object. It will not return undefined if the user does not exist. This type guard bypass was intentionally implemented to avoid using the as unknown as T workaround. Get: ( PlayerIdentifier ) => User ;","title":"Potential type error"},{"location":"API/Server/Users/#get","text":"Returns User object from PlayerIdentifier .","title":"Get"},{"location":"API/Server/Users/#example_3","text":"// Player 'player1' is in the server. const user = Core . Users . Get ( \"player1\" ); // -> user const user2 = Core . Users . Get ( Player1 ); // -> user Exists: ( PlayerIdentifier ) => boolean ;","title":"Example"},{"location":"API/Server/Users/#exists","text":"Returns whether the user PlayerIdentifier exists or not.","title":"Exists"},{"location":"API/Server/Users/#example_4","text":"print ( Core . Users . Exists ( \"Player1\" )); // -> false","title":"Example"},{"location":"Objects/Server/User/","text":"User The User object is generated by the Core.Users service and can be consumed virtually anywhere. API ( property ) User.Stats : Stats ( method ) User . Ping () : number ( method ) User . Name () : string ( method ) User . PlayerObject () : Player | undefined // inherited from `UserProfile` object. (internal) ( method ) UserProfile . IsReady () : boolean ( method ) UserProfile . DataStatus () : \"success\" | \"failed\" | \"loading\" ( method ) UserProfile . DataProfile () : Profile Other objects Stats This object is used to manage the users stats. (both tracked and untracked by leaderstats) Data that exists in this object will persist inside of the user's data profile. ( method ) Stats . Get ( name : string , defaultValue : number ) : StatObject ( method ) Stats . Set ( name : string , value : number ) : StatObject ( method ) Stats . Increment ( name : string , value : number ) : StatObject","title":"User"},{"location":"Objects/Server/User/#user","text":"The User object is generated by the Core.Users service and can be consumed virtually anywhere. API ( property ) User.Stats : Stats ( method ) User . Ping () : number ( method ) User . Name () : string ( method ) User . PlayerObject () : Player | undefined // inherited from `UserProfile` object. (internal) ( method ) UserProfile . IsReady () : boolean ( method ) UserProfile . DataStatus () : \"success\" | \"failed\" | \"loading\" ( method ) UserProfile . DataProfile () : Profile","title":"User"},{"location":"Objects/Server/User/#other-objects","text":"","title":"Other objects"},{"location":"Objects/Server/User/#stats","text":"This object is used to manage the users stats. (both tracked and untracked by leaderstats) Data that exists in this object will persist inside of the user's data profile. ( method ) Stats . Get ( name : string , defaultValue : number ) : StatObject ( method ) Stats . Set ( name : string , value : number ) : StatObject ( method ) Stats . Increment ( name : string , value : number ) : StatObject","title":"Stats"},{"location":"Objects/Shared/UniverseServer/","text":"UniverseServer The UniverseServer object is created by Core.Network.Universe and stores the information for a single universe server. API type UniverseServer = { state : LocalServerState ; id : string ; creationTimeUTC : number ; }; type LocalServerState = \"new\" | \"dead\" ; Properties id: string id JobId of server. (value is \"studio\" if testing in Roblox studio otherwise UUID )","title":"UniverseServer"},{"location":"Objects/Shared/UniverseServer/#universeserver","text":"The UniverseServer object is created by Core.Network.Universe and stores the information for a single universe server. API type UniverseServer = { state : LocalServerState ; id : string ; creationTimeUTC : number ; }; type LocalServerState = \"new\" | \"dead\" ;","title":"UniverseServer"},{"location":"Objects/Shared/UniverseServer/#properties","text":"id: string","title":"Properties"},{"location":"Objects/Shared/UniverseServer/#id","text":"JobId of server. (value is \"studio\" if testing in Roblox studio otherwise UUID )","title":"id"},{"location":"Types/ClientEvent/","text":"ClientEvent interface ClientEvent { name : string ; [ key : string ] : string | number ; } Describes an event sent to the client from the server. (consumed by both server and client)","title":"ClientEvent"},{"location":"Types/PlayerIdentifier/","text":"PlayerIdentifier type PlayerIdentifier = string | Player ; Used to identify a player when searching for a user.","title":"PlayerIdentifier"}]}